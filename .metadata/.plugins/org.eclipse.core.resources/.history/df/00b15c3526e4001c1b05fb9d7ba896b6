import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

// Tic Tac Toe game in the console
// cpu should not overwrite where player has played
// Add levels beginner: random, advanced: better cpu positions

public class WinTicTacToe {

	static ArrayList<Integer> playerPositions = new ArrayList<Integer>();
	static ArrayList<Integer> cpuPositions = new ArrayList<Integer>();

	public static void main(String[] args) {
		// Game Board (2D array)
		String[][] gameBoard = {
							{" 1 ", "|", " 2 ", "|", " 3 "},
							{"---", "+", "---", "+", "---"},
							{" 4 ", "|", " 5 ", "|", " 6 "},
							{"---", "+", "---", "+", "---"},
							{" 7 ", "|", " 8 ", "|", " 9 "},
							};
		
		printGameBoard(gameBoard);
		
		
		
		while(true) {
			Scanner scan = new Scanner(System.in);

			System.out.println("\nEnter your position choice (1-9)");
			
			int playerPos = scan.nextInt();
			while(playerPositions.contains(playerPos) || cpuPositions.contains(playerPos)) {
				System.out.println("Position taken.  Enter a correct position.");
				playerPos= scan.nextInt();
			}
			
			Random rand = new Random();
			int cpuPos = rand.nextInt(9) + 1;
			while(playerPositions.contains(cpuPos) || cpuPositions.contains(cpuPos)) {
				System.out.println("Position taken.  Enter a correct position.");
				cpuPos= rand.nextInt(9) + 1;
			}
			
			placePiece(gameBoard, playerPos, "player");
			printGameBoard(gameBoard);
			
			placePiece(gameBoard, cpuPos, "cpu");
			printGameBoard(gameBoard);
			
			String result = checkWinner();
			System.out.println(result);
		}

		
		
	}
	
	public static void printGameBoard(String[][] gameBoard) {
		
		System.out.println();
		for(String[] row : gameBoard) {
			for(String c : row) {
				System.out.print(c);
			}
			System.out.println();
		}
	}
	
	public static void placePiece(String[][] gameBoard, int pos, String user) {
		
		String symbol = " ? ";
		
		if(user.equals("player")) {
			symbol = " X ";
			playerPositions.add(pos);
		} else if(user.equals("cpu")) {
			symbol = " O ";
			cpuPositions.add(pos);
		}
		
		switch(pos) {
			case 1:
				gameBoard[0][0] = symbol;
				break;
			case 2:
				gameBoard[0][2] = symbol;
				break;
			case 3:
				gameBoard[0][4] = symbol;
				break;
			case 4:
				gameBoard[2][0] = symbol;
				break;
			case 5:
				gameBoard[2][2] = symbol;
				break;
			case 6:
				gameBoard[2][4] = symbol;
				break;
			case 7:
				gameBoard[4][0] = symbol;
				break;
			case 8:
				gameBoard[4][2] = symbol;
				break;
			case 9:
				gameBoard[4][4] = symbol;
				break;
			default:
				break;
		}
	}
	
	public static String checkWinner() {
		
		List topRow = Arrays.asList(1, 2, 3);
		List midRow = Arrays.asList(4, 5, 6);
		List botRow = Arrays.asList(7, 8, 9);
		List leftCol = Arrays.asList(1, 4, 7);
		List midCol = Arrays.asList(2, 5, 8);
		List rightCol = Arrays.asList(3, 6, 9);
		List downCross = Arrays.asList(1, 5, 9);
		List upCross = Arrays.asList(7, 5, 3);
		
		List<List> winning = new ArrayList<List>();
		winning.add(topRow);
		winning.add(midRow);
		winning.add(botRow);
		winning.add(leftCol);
		winning.add(midCol);
		winning.add(rightCol);
		winning.add(downCross);
		winning.add(upCross);

		for(List l : winning) {
			if(playerPositions.containsAll(l)) {
				return "Congratulations!  You won!";
			} else if(cpuPositions.contains(l)) {
				return "Computer wins.  Sorry!";
			} else if(playerPositions.size() + cpuPositions.size() == 9) {
				return "Cat's Game.  No winner.";
			}
		}
		
		return "";
		
	}
}
